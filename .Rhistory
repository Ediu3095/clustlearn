genetic_kmeans(db5, 3)
View(population)
View(population)
genetic_kmeans(db5, 3)
devtools::load_all(".")
genetic_kmeans(db5, 3)
devtools::load_all(".")
genetic_kmeans(db5, 3)
force(centers)
View(centers)
force(data)
fitness
twcv
View(population)
devtools::load_all(".")
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
force(fitness)
force(fitness)
force(fitness)
force(fitness)
force(p)
devtools::load_all(".")
genetic_kmeans(db5, 3)
devtools::load_all(".")
genetic_kmeans(db5, 3)
q
genetic_kmeans(db5, 3, population_size = 4)
View(population)
genetic_kmeans(db5, 3, population_size = 4)
devtools::load_all(".")
genetic_kmeans(db5, 3, population_size = 4)
plot(db5, col = genetic_kmeans(db5, 3)$cluster)
devtools::load_all(".")
plot(db5, col = genetic_kmeans(db5, 3)$cluster)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
devtools::load_all(".")
devtools::load_all(".")
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
for (i in seq_len(100)) { genetic_kmeans(db5, 3) }
plot(db5, col = genetic_kmeans(db5, 3)$cluster)
plot(db5, col = genetic_kmeans(db4, 3)$cluster)
plot(db4, col = genetic_kmeans(db4, 3)$cluster)
plot(db4, col = genetic_kmeans(db4, 3)$cluster)
plot(db4, col = genetic_kmeans(db4, 3)$cluster)
plot(db4, col = genetic_kmeans(db4, 3)$cluster)
plot(db4, col = genetic_kmeans(db4, 3)$cluster)
plot(db4, col = genetic_kmeans(db4, 3)$cluster)
plot(db2, col = genetic_kmeans(db2, 2)$cluster)
plot(db2, col = genetic_kmeans(db2, 2)$cluster)
plot(db2, col = genetic_kmeans(db2, 2)$cluster)
plot(db2, col = genetic_kmeans(db2, 2)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db3, col = genetic_kmeans(db3, 3)$cluster)
plot(db4, col = genetic_kmeans(db4, 3)$cluster, asp = 1)
plot(db4, col = genetic_kmeans(db4, 3)$cluster, asp = 1)
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
devtools::load_all(".")
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
devtools::load_all(".")
devtools::load_all(".")
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
devtools::load_all(".")
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
devtools::load_all(".")
plot(db5, col = genetic_kmeans(db5, 3)$cluster, asp = 1, pch = 20)
for (i in seq_len(100)) { genetic_kmeans(db5, 3) }
for (i in seq_len(100)) { genetic_kmeans(db5, 3) }
View(prob)
View(centers)
chromosome
for (i in seq_len(nrow(population))) { print(setdiff(seq_len(k), population[i, ])) }
devtools::load_all(".")
for (i in seq_len(100)) { genetic_kmeans(db5, 3) }
devtools::load_all(".")
for (i in seq_len(100)) { genetic_kmeans(db5, 3) }
devtools::load_all(".")
for (i in seq_len(100)) { genetic_kmeans(db5, 3) }
force(k)
force(population)
devtools::load_all(".")
for (i in seq_len(100)) { genetic_kmeans(db5, 3) }
devtools::load_all(".")
for (i in seq_len(100)) { genetic_kmeans(db5, 3) }
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3)
genetic_kmeans(db5, 3, population_size = 100, max_generations = 100)
genetic_kmeans(db5, 3, population_size = 5, max_generations = 100)
genetic_kmeans(db5, 3, population_size = 100, max_generations = 5)
genetic_kmeans(db5, 3, max_generations = 100)
genetic_kmeans(db5, 3, max_generations = 50)
devtools::load_all(".")
genetic_kmeans(db5, 3, max_generations = 50)
cl <- genetic_kmeans(db5, 3, max_generations = 50)
cl
devtools::load_all(".")
(cl <- genetic_kmeans(db5, 3, max_generations = 50))
plot(db5, col = cl$cluster)
devtools::load_all(".")
library(clustlearn)
db1
plot(db1)
plot(db1, asp = 1)
plot(db1, asp = 1, pch = 20)
plot(db2, asp = 1, pch = 20)
plot(db3, asp = 1, pch = 20)
plot(db4, asp = 1, pch = 20)
plot(db5, asp = 1, pch = 20)
plot(db6, asp = 1, pch = 20)
plot(db5, col = kmeans(db5, 3), asp = 1, pch = 20)
plot(db5, col = kmeans(db5, 3)$cluster, asp = 1, pch = 20)
?clustlearn::kmeans
library(clustlearn)
?clustlearn::kmeans
?clustlearn::agglomerative_clustering
?clustlearn::divisive_clustering
?clustlearn::dbscan
?clustlearn::gaussian_mixture
?clustlearn::dbscan
library(clustlearn)
?gaussian_mixture
test <- function(db, k) {
print(cl <- clustlearn::gaussian_mixture(db, k, 100))
x <- seq(min(db[, 1]), max(db[, 1]), length.out = 100)
y <- seq(min(db[, 2]), max(db[, 2]), length.out = 100)
# plot(db, col = cl$cluster, asp = 1, pch = 20)
for (i in seq_len(k)) {
m <- cl$mu[i, ]
s <- cl$sigma[i, , ]
f <- function(x, y) cl$lambda[i] * clustlearn:::dmnorm(cbind(x, y), m, s)
z <- outer(x, y, f)
contour(x, y, z, col = i)
}
}
test(db3)
test(db3, 3)
test(db3, 3)
test <- function(db, k) {
print(cl <- clustlearn::gaussian_mixture(db, k, 100))
x <- seq(min(db[, 1]), max(db[, 1]), length.out = 100)
y <- seq(min(db[, 2]), max(db[, 2]), length.out = 100)
# plot(db, col = cl$cluster, asp = 1, pch = 20)
for (i in seq_len(k)) {
m <- cl$mu[i, ]
s <- cl$sigma[i, , ]
f <- function(x, y) cl$lambda[i] * clustlearn:::dmnorm(cbind(x, y), m, s)
z <- outer(x, y, f)
contour(x, y, z, col = i, add = TRUE)
}
}
test(db3, 3)
plot()
plot(c())
plot(c(), c())
test <- function(db, k) {
print(cl <- clustlearn::gaussian_mixture(db, k, 100))
x <- seq(min(db[, 1]), max(db[, 1]), length.out = 100)
y <- seq(min(db[, 2]), max(db[, 2]), length.out = 100)
# plot(db, col = cl$cluster, asp = 1, pch = 20)
for (i in seq_len(k)) {
m <- cl$mu[i, ]
s <- cl$sigma[i, , ]
f <- function(x, y) cl$lambda[i] * clustlearn:::dmnorm(cbind(x, y), m, s)
z <- outer(x, y, f)
contour(x, y, z, col = i, add = FALSE)
}
}
test(db3, 3)
test <- function(db, k) {
print(cl <- clustlearn::gaussian_mixture(db, k, 100))
x <- seq(min(db[, 1]), max(db[, 1]), length.out = 100)
y <- seq(min(db[, 2]), max(db[, 2]), length.out = 100)
# plot(db, col = cl$cluster, asp = 1, pch = 20)
for (i in seq_len(k)) {
m <- cl$mu[i, ]
s <- cl$sigma[i, , ]
f <- function(x, y) cl$lambda[i] * clustlearn:::dmnorm(cbind(x, y), m, s)
z <- outer(x, y, f)
contour(x, y, z, col = i, add = i == 1)
}
}
test <- function(db, k) {
print(cl <- clustlearn::gaussian_mixture(db, k, 100))
x <- seq(min(db[, 1]), max(db[, 1]), length.out = 100)
y <- seq(min(db[, 2]), max(db[, 2]), length.out = 100)
# plot(db, col = cl$cluster, asp = 1, pch = 20)
for (i in seq_len(k)) {
m <- cl$mu[i, ]
s <- cl$sigma[i, , ]
f <- function(x, y) cl$lambda[i] * clustlearn:::dmnorm(cbind(x, y), m, s)
z <- outer(x, y, f)
contour(x, y, z, col = i, add = i != 1)
}
}
test(db3, 3)
test <- function(db, k) {
print(cl <- clustlearn::gaussian_mixture(db, k, 100))
x <- seq(min(db[, 1]), max(db[, 1]), length.out = 100)
y <- seq(min(db[, 2]), max(db[, 2]), length.out = 100)
# plot(db, col = cl$cluster, asp = 1, pch = 20)
for (i in seq_len(k)) {
m <- cl$mu[i, ]
s <- cl$sigma[i, , ]
f <- function(x, y) cl$lambda[i] * clustlearn:::dmnorm(cbind(x, y), m, s)
z <- outer(x, y, f)
contour(x, y, z, col = i, add = i != 1, asp = 1)
}
}
test(db3, 3)
test <- function(db, k) {
# DATASET
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\06-partitional-clustering-mixture-resolving-algorithms-dataset.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(data, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
print(cl <- clustlearn::gaussian_mixture(db, k, 100))
x <- seq(min(db[, 1]), max(db[, 1]), length.out = 100)
y <- seq(min(db[, 2]), max(db[, 2]), length.out = 100)
# MODELS
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\07-partitional-clustering-mixture-resolving-algorithms-models.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
for (i in seq_len(k)) {
m <- cl$mu[i, ]
s <- cl$sigma[i, , ]
f <- function(x, y) cl$lambda[i] * clustlearn:::dmnorm(cbind(x, y), m, s)
z <- outer(x, y, f)
contour(x, y, z, col = i, add = i != 1, asp = 1)
}
dev.off()
# CLUSTERS
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\08-partitional-clustering-mixture-resolving-algorithms-clusters.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(data, col = members$cluster, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
}
test(db3, 3)
test <- function(db, k) {
# DATASET
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\06-partitional-clustering-mixture-resolving-algorithms-dataset.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
print(cl <- clustlearn::gaussian_mixture(db, k, 100))
x <- seq(min(db[, 1]), max(db[, 1]), length.out = 100)
y <- seq(min(db[, 2]), max(db[, 2]), length.out = 100)
# MODELS
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\07-partitional-clustering-mixture-resolving-algorithms-models.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
for (i in seq_len(k)) {
m <- cl$mu[i, ]
s <- cl$sigma[i, , ]
f <- function(x, y) cl$lambda[i] * clustlearn:::dmnorm(cbind(x, y), m, s)
z <- outer(x, y, f)
contour(x, y, z, col = i, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, add = i != 1)
}
dev.off()
# CLUSTERS
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\08-partitional-clustering-mixture-resolving-algorithms-clusters.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db, col = cl$cluster, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
}
test(db3, 3)
?dbscan
test <- function(db, eps) {
# DATASET
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\04-partitional-clustering-hard-or-crisp-density-based-clustering-dataset.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
# CLUSTERS
print(cl <- clustlearn::dbscan(db, eps))
out <- cl$cluster == 0
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\05-partitional-clustering-hard-or-crisp-density-based-clustering-clusters.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db[!out, ], col = cl$cluster[!out], pch = 20, asp = 1)
points(db[out, ], col = max(cl$cluster) + 1, pch = 4, lwd = 2)
dev.off()
}
test(clustlearn::db4, 0.2)
test <- function(db, k) {
# DATASET
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\06-partitional-clustering-mixture-resolving-algorithms-dataset.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
# MODELS
print(cl <- clustlearn::gaussian_mixture(db, k, 100))
x <- seq(min(db[, 1]), max(db[, 1]), length.out = 100)
y <- seq(min(db[, 2]), max(db[, 2]), length.out = 100)
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\07-partitional-clustering-mixture-resolving-algorithms-models.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
for (i in seq_len(k)) {
m <- cl$mu[i, ]
s <- cl$sigma[i, , ]
f <- function(x, y) cl$lambda[i] * clustlearn:::dmnorm(cbind(x, y), m, s)
z <- outer(x, y, f)
contour(x, y, z, col = i, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, add = i != 1)
}
dev.off()
# CLUSTERS
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\08-partitional-clustering-mixture-resolving-algorithms-clusters.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db, col = cl$cluster, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
}
test(db3, 3)
###############################################################################################
test <- function(db, eps) {
# DATASET
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\04-partitional-clustering-hard-or-crisp-density-based-clustering-dataset.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
# CLUSTERS
print(cl <- clustlearn::dbscan(db, eps))
out <- cl$cluster == 0
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\05-partitional-clustering-hard-or-crisp-density-based-clustering-clusters.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db[!out, ], col = cl$cluster[!out], pch = 20, asp = 1)
points(db[out, ], col = max(cl$cluster) + 1, pch = 4, lwd = 2)
dev.off()
}
test(clustlearn::db4, 0.2)
test <- function(db, k) {
# DATASET
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\06-partitional-clustering-mixture-resolving-algorithms-dataset.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db, col = 1, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
# MODELS
print(cl <- clustlearn::gaussian_mixture(db, k, 100))
x <- seq(min(db[, 1]), max(db[, 1]), length.out = 100)
y <- seq(min(db[, 2]), max(db[, 2]), length.out = 100)
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\07-partitional-clustering-mixture-resolving-algorithms-models.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
for (i in seq_len(k)) {
m <- cl$mu[i, ]
s <- cl$sigma[i, , ]
f <- function(x, y) cl$lambda[i] * clustlearn:::dmnorm(cbind(x, y), m, s)
z <- outer(x, y, f)
contour(x, y, z, col = i, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, add = i != 1)
}
dev.off()
# CLUSTERS
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\08-partitional-clustering-mixture-resolving-algorithms-clusters.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db, col = cl$cluster, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
}
test(db3, 3)
plot(db3, col = 1, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
par(mar = c(1, 1, 1, 1))
plot(db3, col = 1, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
test <- function(db, eps) {
# DATASET
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\04-partitional-clustering-hard-or-crisp-density-based-clustering-dataset.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
# CLUSTERS
print(cl <- clustlearn::dbscan(db, eps))
out <- cl$cluster == 0
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\05-partitional-clustering-hard-or-crisp-density-based-clustering-clusters.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db[!out, ], col = cl$cluster[!out], pch = 20, asp = 1)
points(db[out, ], col = max(cl$cluster) + 1, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 4, lwd = 2)
dev.off()
}
test(clustlearn::db4, 0.2)
test <- function(db, eps) {
# DATASET
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\04-partitional-clustering-hard-or-crisp-density-based-clustering-dataset.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db, main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
dev.off()
# CLUSTERS
print(cl <- clustlearn::dbscan(db, eps))
out <- cl$cluster == 0
png(
file = 'D:\\Pictures\\TFG\\stateoftheart\\05-partitional-clustering-hard-or-crisp-density-based-clustering-clusters.png',
width = 500,
height = 500
)
par(mar = c(1, 1, 1, 1))
plot(db[!out, ], col = cl$cluster[!out], main = '', sub = '', xlab = '', ylab = '', asp = 1, frame.plot = TRUE, axes = FALSE, pch = 20)
points(db[out, ], col = max(cl$cluster) + 1, pch = 4, lwd = 2)
dev.off()
}
test(clustlearn::db4, 0.2)
library(clustlearn)
?agglomerative_clustering
?gaussian_mixture
